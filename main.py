
import random

from telebot import types, TeleBot, custom_filters
from telebot.storage import StateMemoryStorage
from telebot.handler_backends import State, StatesGroup

import psycopg2

# –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ SQL-–∑–∞–ø—Ä–æ—Å–æ–≤
def query_to_bd(sql_query, *arg):
    conn = psycopg2.connect(dbname="learning_english_telegram_bot_v2",
                            host="127.0.0.1",
                            user="postgres",
                            password="101917",
                            port="5432")
    with conn.cursor() as cur:
        cur.execute(sql_query, *arg)
        conn.commit()
        if "CREATE" in sql_query or "ALTER" in sql_query:
            result = cur.statusmessage
        else:
            result = cur.fetchall()
    conn.close()
    return result

# –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∏—è –ë–î
def create_bd(sql_query):
    conn_create = psycopg2.connect(
        dbname="postgres",
        user="postgres",
        password="101917",
        host="127.0.0.1",
        port="5432"
    )
    cur_create = conn_create.cursor()
    conn_create.autocommit = True
    cur_create.execute(sql_query)
    result = cur_create.fetchall()
    cur_create.close()
    conn_create.close()
    return result

if create_bd("""
                SELECT 1 
                FROM pg_database 
                WHERE datname='learning_english_telegram_bot_v2'
                """
             )[0][0] != 1:
    create_bd("CREATE DATABASE learning_english_telegram_bot_v2")
    print("–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –ë–î - learning_english_telegram_bot_v2")
else:
    print("–ë–î 'learning_english_telegram_bot_v2' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –≤ –ë–î —Ç–∞–±–ª–∏—Ü–∞ 'users'
if not query_to_bd("""
                    SELECT EXISTS (
                        SELECT 1
                        FROM information_schema.tables
                        WHERE table_name = 'users')
                        """
                   )[0][0]:
    # –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ç–æ —Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
    print(query_to_bd("""
                        CREATE TABLE IF NOT EXISTS users (
                        id BIGINT PRIMARY KEY NOT NULL)
                        """
                      ), 'users')
else:
    print("–¢–∞–±–ª–∏—Ü–∞ 'users' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –≤ –ë–î —Ç–∞–±–ª–∏—Ü–∞ 'words'
if not query_to_bd("""
                    SELECT EXISTS (
                        SELECT 1 
                        FROM information_schema.tables 
                        WHERE table_name = 'words')
                        """
                   )[0][0]:
    # –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ç–æ —Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
    print(query_to_bd("""
                        CREATE TABLE IF NOT EXISTS words (
                            id SERIAL PRIMARY KEY NOT NULL, 
                            title VARCHAR(100) NOT NULL,
                            translate VARCHAR(100) NOT NULL)
                """
                ), 'words')
else:
    print("–¢–∞–±–ª–∏—Ü–∞ 'words' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")

# –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ 'words' —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –≤ –Ω–µ–π —Å–ª–æ–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '1000000000'
if query_to_bd("""
                    SELECT COUNT(*)
                    FROM words
                    """
                   )[0][0] == 0:
    # –ï—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–∞ "–ø–æ-—É–º–æ–ª—á–∞–Ω–∏—é"
    print('–î–æ–±–∞–≤–ª–µ–Ω—ã —Å–ª–æ–≤–∞', query_to_bd("""
                                                INSERT INTO words
                                                VALUES	
                                                    (1, '–º–∏—Ä', 'peace'),
		                                            (2, '–∫—Ä–∞—Å–Ω—ã–π', 'red'),
		                                            (3, '–º—É–∑—ã–∫–∞', 'music'),
		                                            (4, '–∞–≤—Ç–æ–º–æ–±–∏–ª—å', 'car'),
		                                            (5, '—Å—Ç–æ–ª–∏—Ü–∞', 'capital'),
		                                            (6, '—Å—Ç–æ–ª', 'table'),
		                                            (7, '—Å—á–∞—Å—Ç–ª–∏–≤—ã–π', 'happy'),
		                                            (8, '–∫–∏–Ω–æ', 'movie'),
		                                            (9, '—É–ª–∏—Ü–∞', 'street'),
		                                            (10, '–ø–æ–±–µ–¥–∞', 'victory')
                                                RETURNING *
                                                """
                                             ))
else:
    print("–í —Ç–∞–±–ª–∏—Ü–µ 'words' —É–∂–µ –µ—Å—Ç—å –∑–∞–ø–∏—Å–∏.")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –≤ –ë–î —Ç–∞–±–ª–∏—Ü–∞ 'user_words'
if not query_to_bd("""
                    SELECT EXISTS (
                        SELECT 1 
                        FROM information_schema.tables 
                        WHERE table_name = 'user_words')
                        """
                   )[0][0]:
    # –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ç–æ —Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
    print(query_to_bd("""
                        CREATE TABLE IF NOT EXISTS user_words (
                            id SERIAL PRIMARY KEY NOT NULL, 
                            title VARCHAR(100) NOT NULL,
                            translate VARCHAR(100) NOT NULL,
                            user_id BIGINT NOT NULL)
                """
                ), 'user_words')
    print(query_to_bd("""
                        ALTER TABLE public.user_words
                        ADD CONSTRAINT user_words_users_fk
                        FOREIGN KEY (user_id) REFERENCES users(id)
                        ON DELETE CASCADE ON UPDATE CASCADE
                        """
                        ), 'user_words')
else:
    print("–¢–∞–±–ª–∏—Ü–∞ 'user_words' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")

state_storage = StateMemoryStorage()

# –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Ä–∞–Ω–µ–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É –≤ –¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç—É, —Ç–æ–∫–µ–Ω –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ —Ñ–∞–π–ª–∞ "key.txt"
with open('key.txt') as f:
    token_bot = f.readline().strip()
bot = TeleBot(token_bot, state_storage=state_storage)
print('Start telegram bot...')

# –û–±—ä—è–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –±–æ—Ç–∞
buttons = list()

# –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞
def show_hint(*lines):
    return '\n'.join(lines)

# –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ —Ü–µ–ª–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –∏ –ø–µ—Ä–µ–≤–æ–¥–∞
def show_target(data):
    return f"{data['target_word']} -> {data['translate_word']}"

# –ö–ª–∞—Å—Å –∫–æ–º–∞–Ω–¥ –∫–Ω–æ–ø–æ–∫ –±–æ—Ç–∞
class Command:
    ADD_WORD = '–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï'
    DELETE_WORD = '–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æüîô'
    NEXT = '–î–∞–ª—å—à–µ ‚è≠'

# –ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π
class MyStates(StatesGroup):
    target_word = State()
    translate_word = State()
    another_words = State()

# –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
def get_user(uid):
    if query_to_bd("""
                    SELECT id 
                    FROM users 
                    WHERE id=%s
                    """, (uid,)
                   ):
        return uid
    else:
        print('–û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä—ã–π –µ—â—ë –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É \"/start\"')
        query_to_bd("""
                    INSERT INTO users 
                    VALUES (%s) 
                    RETURNING id
                    """, (uid,)
                    )
        print(f'–í –ë–î –¥–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {uid}')
        return 0

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã "/start"
@bot.message_handler(commands=['start'])
def send_wellcome(message):
    get_user(int(message.from_user.id))
    bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Çüëã, {message.from_user.first_name} {message.from_user.last_name}!\n'
                                      f'–î–∞–≤–∞–π –ø–æ–ø—Ä–∞–∫—Ç–∏–∫—É–µ–º—Å—è –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ. –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–∂–µ—à—å –ø—Ä–æ—Ö–æ–¥–∏—Ç—å '
                                      f'–≤ —É–¥–æ–±–Ω–æ–º –¥–ª—è —Å–µ–±—è —Ç–µ–º–ø–µ.\n'
                                      f'–ö–æ–º–∞–Ω–¥–∞ "/cards" –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ "–î–∞–ª—å—à–µ ‚è≠" –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ.'
                                      f'–£ —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–∞–∂—ë—Ä, –∫–∞–∫ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä, –∏ —Å–æ–±–∏—Ä–∞—Ç—å '
                                      f'—Å–≤–æ—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –±–∞–∑—É –¥–ª—è –æ–±—É—á–µ–Ω–∏—è.\n'
                                      f'–î–ª—è —ç—Ç–æ–≥–æ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏:\n'
                                      f'- –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï;\n- —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ üîô.\n–ù—É —á—Ç–æ, –Ω–∞—á–Ω—ë–º ‚è≠')

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /cards
@bot.message_handler(commands=['cards'])
def create_cards(message):
    uid = get_user(int(message.from_user.id))
    markup = types.ReplyKeyboardMarkup(row_width=2)
    buttons.clear()
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–π –Ω–∞–±–æ—Ä —Ä—É—Å—Å–∫–∏—Ö —Å–ª–æ–≤ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è
    possible_rus_words = query_to_bd("""
                                        SELECT title, translate  --–ø–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–æ –∏ –ø–µ—Ä–µ–≤–æ–¥
                                        FROM (
                                            SELECT title, translate  --–ø–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–æ –∏ –ø–µ—Ä–µ–≤–æ–¥
                                            FROM words  --–∏–∑ —Ç–∞–±–ª–∏—Ü—ã –æ–±—â–∏—Ö —Å–ª–æ–≤
                                            UNION
                                            SELECT title, translate  --–ø–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–æ –∏ –ø–µ—Ä–µ–≤–æ–¥
                                            FROM user_words  --–∏–∑ —Ç–∞–±–ª–∏—Ü—ã –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤
                                            WHERE user_id=%s  --–≥–¥–µ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–∞–≤–Ω–æ –∏—Å–∫–æ–º–æ–º—É –∞–π–¥–∏
                                            )
                                        ORDER BY RANDOM()  --—Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞–Ω–¥–æ–º—É
                                        LIMIT 4  --–±–µ—Ä–µ–º 4 —Å–ª–æ–≤–∞
                                    """, (uid,))

    # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–∏–∑—É—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è, —Ç–æ
    if len(possible_rus_words) > 0:
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Ä—É—Å—Å–∫–æ–µ —Å–ª–æ–≤–æ –∏–∑ –≤–æ–∑–º–æ–∂–Ω—ã—Ö
        translate = possible_rus_words[0][0]
        print(f'–ó–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ: {translate}')
        # –í—ã–±–∏—Ä–∞–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Å–ª–æ–≤—É
        target_word = possible_rus_words[0][1]
        print(f'–ü–µ—Ä–µ–≤–æ–¥: {target_word}')

        # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–µ—Ä–µ–≤–æ–¥–æ–º
        target_word_btn = types.KeyboardButton(target_word)
        buttons.append(target_word_btn)

        # –í—ã–±–∏—Ä–∞–µ–º —Ç—Ä–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤–∞
        others = list()
        for word in possible_rus_words[1 :]:
            others.append(word[1])
        print(f'–¢—Ä–∏ –¥—Ä—É–≥–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–∞: {others}')

        # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Ç—Ä–µ–º –¥—Ä—É–≥–∏–º –∫–Ω–æ–ø–∫–∞–º
        other_words_btns = [types.KeyboardButton(word) for word in others]
        buttons.extend(other_words_btns)
        random.shuffle(buttons)

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        next_btn = types.KeyboardButton(Command.NEXT)
        add_word_btn = types.KeyboardButton(Command.ADD_WORD)
        delete_word_btn = types.KeyboardButton(Command.DELETE_WORD)
        buttons.extend([next_btn, add_word_btn, delete_word_btn])
        markup.add(*buttons)

        # –í—ã–≤–æ–¥–∏–º —Å–ª–æ–≤–æ –∑–∞–¥–∞–Ω–∏–µ
        greeting = f"–í—ã–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞:\nüá∑üá∫ {translate}"
        bot.send_message(message.chat.id, greeting, reply_markup=markup)
        bot.set_state(message.from_user.id, MyStates.target_word, message.chat.id)
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            data['target_word'] = target_word
            data['translate_word'] = translate
            data['other_words'] = others
    # –ï—Å–ª–∏ –≤—Å–µ —Å–ª–æ–≤–∞ –∏–∑—É—á–µ–Ω—ã, —Ç–æ
    else:
        bot.send_message(message.chat.id, "–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —Å–ª–æ–≤! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ë–î!")

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "–î–∞–ª–µ–µ"
@bot.message_handler(func=lambda message: message.text == Command.NEXT)
def next_cards(message):
    create_cards(message)

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ"
list_user_words = list()
@bot.message_handler(func=lambda message: message.text == Command.DELETE_WORD)
def delete_word(message):
    uid = get_user(message.from_user.id)
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–∑ –ë–î —Ä—É—Å—Å–∫–∏–µ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    user_words = query_to_bd("""
                                SELECT title
                                FROM user_words
                                WHERE user_id=%s
                                """, (uid,))
    text = ""
    list_user_words.clear()
    for word in user_words:
        text += word[0] + "\n"
        list_user_words.append(word[0])
    chat_id = message.chat.id
    msg = bot.send_message(chat_id,f'–í–∞—à–∏ —Å–ª–æ–≤–∞ –≤ –ë–î:\n{text}–ù–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:')
    bot.register_next_step_handler(msg, del_word_to_bd)

# –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞ –∏–∑ –ë–î
def del_word_to_bd(message):
    uid = get_user(message.from_user.id)
    if message.text in list_user_words:
        target = message.text
        result = query_to_bd("""
                                DELETE FROM user_words
                                WHERE title=%s AND user_id=%s
                                RETURNING *
                                """, (target, uid)
                             )[0][1]
        bot.send_message(message.chat.id,f'–ò–∑ –ë–î —É–¥–∞–ª–µ–Ω–æ —Å–ª–æ–≤–æ: {result}.')
        print(f'–ò–∑ –ë–î —É–¥–∞–ª–µ–Ω–æ —Å–ª–æ–≤–æ: {result}')
    else:
        msg = bot.send_message(message.chat.id,f"–ú–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Ç–æ–ª—å–∫–æ —ç—Ç–∏ —Å–ª–æ–≤–∞: {"; ".join(list_user_words)}\n."
                                               f"–ù–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
        bot.register_next_step_handler(msg, del_word_to_bd)

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç —Å–ª–æ–≤–æ"
@bot.message_handler(func=lambda message: message.text == Command.ADD_WORD)
def add_word(message):
    chat_id = message.chat.id
    msg = bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏ –ø–æ—Å–ª–µ –¥–≤–æ–µ—Ç–æ—á–∏—è –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥ –ø–æ —à–∞–±–ª–æ–Ω—É:\n —è–∑—ã–∫:language')
    bot.register_next_step_handler(msg, add_word_to_bd)

# –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞ –≤ –ë–î
def add_word_to_bd(message):
    uid = get_user(message.from_user.id)
    if ':' in message.text:
        source = message.text[: message.text.find(':')]
        print(source)
        target = message.text[message.text.rfind(':') + 1 :]
        print(target)
        result = query_to_bd("""
                                        INSERT INTO user_words (title, translate, user_id)
                                        VALUES (%s, %s, %s)
                                        RETURNING *
                                        """, (source, target, uid)
                            )
        print(f"–í –ë–î –¥–æ–±–∞–≤–ª–µ–Ω—ã —Å–ª–æ–≤–æ {result[0][1]} –∏ –ø–µ—Ä–µ–≤–æ–¥ {result[0][2]}.")
        count_possible_words = query_to_bd("""
                                                SELECT COUNT(title)
                                                FROM (
                                                        SELECT title
                                                        FROM words
                                                        UNION
                                                        SELECT title
                                                        FROM user_words
                                                        WHERE user_id=%s)
                                                    """, (uid,)
                                           )[0][0]
        bot.send_message(message.chat.id, f'–ü–∞—Ä–∞ —Å–ª–æ–≤: {source} –∏ {target} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ë–î.\n'
                                          f'–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è - {count_possible_words}')
    else:
        chat_id = message.chat.id
        msg = bot.send_message(chat_id,
                               '–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏ –ø–æ—Å–ª–µ –¥–≤–æ–µ—Ç–æ—á–∏—è –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥ –ø–æ —à–∞–±–ª–æ–Ω—É:\n —è–∑—ã–∫:language')
        bot.register_next_step_handler(msg, add_word_to_bd)

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ
@bot.message_handler(func=lambda message: True, content_types=['text'])
def message_reply(message):
    uid = get_user(message.from_user.id)
    text = message.text
    markup = types.ReplyKeyboardMarkup(row_width=2)
    with bot.retrieve_data(uid, message.chat.id) as data:
        target_word = data['target_word']
        if text == target_word:
            hint = show_target(data)
            hint_text = ["–û—Ç–ª–∏—á–Ω–æ!‚ù§", hint]
            buttons.clear()
            next_btn = types.KeyboardButton(Command.NEXT)
            add_word_btn = types.KeyboardButton(Command.ADD_WORD)
            delete_word_btn = types.KeyboardButton(Command.DELETE_WORD)
            buttons.extend([next_btn, add_word_btn, delete_word_btn])
            hint = show_hint(*hint_text)
        else:
            for btn in buttons:
                if btn.text == text:
                    btn.text = text + '‚ùå'
                    break
            hint = show_hint("–î–æ–ø—É—â–µ–Ω–∞ –æ—à–∏–±–∫–∞!",
                             f"–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –≤—Å–ø–æ–º–Ω–∏—Ç—å —Å–ª–æ–≤–æ üá∑üá∫{data['translate_word']}")
    markup.add(*buttons)
    bot.send_message(message.chat.id, hint, reply_markup=markup)
bot.add_custom_filter(custom_filters.StateFilter(bot))
bot.infinity_polling(skip_pending=True)

if __name__ == '__main__':
    bot.polling()


